package main

import (
	"context"
	"log"
	"os"
	"os/signal"

	"github.com/manarakozhamuratova/one-lab-task2/config"
	_ "github.com/manarakozhamuratova/one-lab-task2/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/manarakozhamuratova/one-lab-task2/internal/service"
	"github.com/manarakozhamuratova/one-lab-task2/internal/storage"
	"github.com/manarakozhamuratova/one-lab-task2/logger"
	"github.com/manarakozhamuratova/one-lab-task2/transport/httpserver"
	"github.com/manarakozhamuratova/one-lab-task2/transport/httpserver/handler"
	"github.com/manarakozhamuratova/one-lab-task2/transport/httpserver/middleware"
)

// @title Super API
// @version 1.0
// @description This is my first swagger documentation.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @host localhost:9090

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	gracefullyShutdown(cancel)
	l := logger.Logger(ctx)
	cfg, err := config.ParseYAML()
	if err != nil {
		l.Fatal("cannot parse config: ", err)
	}
	l.Info("Success parce config")
	if err := cfg.Validate(); err != nil {
		l.Fatal("uncorrect config: ", err)
	}
	st, err := storage.New(ctx, cfg)
	if err != nil {
		l.Fatal("storage init failed: ", err)
	}
	l.Info("Success connect to db")
	srv, err := service.NewService(st)
	if err != nil {
		l.Fatal("srv init failed: ", err)
	}

	jwt := middleware.NewJWTAuth(cfg, srv.User)
	handlers := handler.NewHandler(cfg, srv, jwt)
	server := httpserver.NewServer(cfg, handlers)
	l.Info("App starting")
	return server.StartHTTPServer(ctx)
}

func gracefullyShutdown(c context.CancelFunc) {
	osC := make(chan os.Signal, 1)
	signal.Notify(osC, os.Interrupt)
	go func() {
		log.Print(<-osC)
		c()
	}()
}
