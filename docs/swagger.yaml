definitions:
  model.AuthResponse:
    properties:
      token:
        type: string
    type: object
  model.AuthUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Book:
    properties:
      author:
        type: string
      name:
        type: string
    type: object
  model.BorrowedBook:
    properties:
      borrow_date:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.CreateResp:
    properties:
      createdAt:
        type: string
      id:
        type: integer
    type: object
  model.UpdatePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
      re_new_password:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  model.UserListing:
    properties:
      borrowed_books:
        items:
          $ref: '#/definitions/model.BorrowedBook'
        type: array
      username:
        type: string
    type: object
  model.UserListingBookCount:
    properties:
      count:
        type: integer
      username:
        type: string
    type: object
host: localhost:9090
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is my first swagger documentation.
  termsOfService: http://swagger.io/terms/
  title: Manar Super API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.AuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
      summary: Аутентификация пользователя
      tags:
      - user
  /book:
    post:
      consumes:
      - application/json
      description: Создание книги
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      summary: Создание книги
      tags:
      - book
  /book/{id}/give:
    get:
      consumes:
      - application/json
      description: Вернуть книгу
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      security:
      - ApiKeyAuth: []
      summary: Вернуть книгу
      tags:
      - book
  /book/{id}/take:
    get:
      consumes:
      - application/json
      description: Взять книгу
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: ""
      security:
      - ApiKeyAuth: []
      summary: Взять книгу
      tags:
      - book
  /user:
    get:
      consumes:
      - application/json
      description: Получение списка пользователей с активными книгами
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserListing'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Получение списка пользователей с активными книгами
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Создание пользователя
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CreateResp'
      summary: Создание пользователя
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Обновление пароля пользователя
      parameters:
      - description: Входящие данные
        in: body
        name: rq
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePassword'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Обновление пароля пользователя
      tags:
      - user
  /user/count_books:
    get:
      consumes:
      - application/json
      description: Получение списка пользователей с количеством книгом за последние
        30 дней
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserListingBookCount'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Получение списка пользователей с количеством книгом за последние 30
        дней
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
